'use strict';

let mongoose = require('mongoose'),
    crypto = require('crypto');

let config = require('../config/app');

let ObjectId = mongoose.Schema.ObjectId;


let userSchema = new mongoose.Schema({
    username: {
        type: String,
        required: [true, 'username is required.'],
        unique: [true, 'This username is registered.']
    },

    avatar: {
        type: String,
        default: config.user.defaultAvatarURL
    },

    gender: {
        type: String,
        enum: ['Nam', 'Ná»¯'],
    },

    birthday: {
        type: Number,
        default: 0
    },

    likedArticles: [
        {
            type: ObjectId,
            ref: 'Article',
            unique: true
        }
    ],

    nickname: {
        type: String,
        default: config.user.defaultNickname
    },

    fullname: {
        type: String,
        required: [true, 'Fullname is required.'],
        default: config.user.defaultFullname
    },

    email: {
        type: String,
        lowercase: true,
        match: [/.+\@.+\..+/, 'Invalid e-mail.']
    },

    password: {
        type: String,
        required: [true, 'Password is required.'],
        validate: [isValidPassword, 'Password should be longer 6 characters.']
    },

    salt: String,

    typeMember: {
        type: String,
        enum: ['ADMIN', 'AUTHOR', 'USER'],
        required: [true, 'typeMember is required.'],
        default: config.user.typeMember.user
    },

    accessToken: String,

    typeAccount: {
        type: String,
        enum: ['tvtnews', 'facebook', 'google'],
        required: [true, 'Type Account is required.']
    },

    typeAccountId: String,

    articleCount: {
        type: Number,
        default: 0
    }
});

// Hash user's password before saving user
userSchema.pre('save', function (next) {
    if (this.password) {
        // Creates an autogenerated pseudo-random hashing salt
        this.salt = new Buffer(crypto.randomBytes(16).toString('base64'), 'base64');
        // Hash password
        this.password = this.hashPassword(this.password);
    }
    next();
});

// Hash password
userSchema.methods.hashPassword = function (password) {
    return crypto.pbkdf2Sync(password, this.salt, 10000, 64).toString('base64');
};

// Authenticate user
userSchema.methods.authenticate = function (password) {
    return this.password === this.hashPassword(password);
};

// Transform user to JSON
userSchema.methods.toJSON = function () {
    let user = this.toJSONPrivate();
    delete user.accessToken;
    return user;
};

// Transform user to JSON for public profile
userSchema.methods.toJSONPrivate = function () {
    let user = this.toObject();
    delete user.password;
    delete user.salt;
    delete user.likedArticles;
    return user;
};

function isValidPassword(password) {
    return password && password.length >= 6;
}

mongoose.model('User', userSchema);